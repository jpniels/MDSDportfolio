



package org.xtext.example.mydsl.generator

import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.emf.ecore.resource.Resource
import org.xtext.example.mydsl.anislide.Template
import org.xtext.example.mydsl.generator.AnislideGenerator;
import org.xtext.example.mydsl.anislide.Global
import org.xtext.example.mydsl.anislide.Slide
import org.xtext.example.mydsl.anislide.Title
import org.xtext.example.mydsl.anislide.Tmplt
import org.xtext.example.mydsl.anislide.ProgressAnimation
import org.xtext.example.mydsl.anislide.Textcolor
import org.xtext.example.mydsl.anislide.BackgroundColor
import org.xtext.example.mydsl.anislide.Animate
import org.xtext.example.mydsl.anislide.SlideEntity
import org.xtext.example.mydsl.anislide.Progressanim
import org.xtext.example.mydsl.anislide.Width
import org.xtext.example.mydsl.anislide.Height

class LatexGenerator extends AnislideGenerator  {
	new(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		initialise(resource, fsa, context);
		fsa.generateFile(title + ".tex", generateDocument());

	}
	def generateDocument() {
		'''
		% #########################
		% # GENERATED BY AniSlide #
		% #########################
		
		\documentclass{beamer}
		\usepackage{xcolor}
		\usepackage{tikz}
		\usetikzlibrary{calc}
		
		\definecolor{pbblue}{HTML}{0A75A8}% color for the progress bar and the circle
				\definecolor{pbgray}{HTML}{575757}% background color for the progress bar
				
		\makeatletter
		\def\progressbar@progressbara{} % the progress bar
		\def\progressbar@progressbarb{} % the second progress bar
		\newcount\progressbar@tmpcounta% auxiliary counter
		\newcount\progressbar@tmpcountb% auxiliary counter
		\newdimen\progressbar@pbht %progressbar height
		\newdimen\progressbar@pbwd %progressbar width
		\newdimen\progressbar@tmpdim % auxiliary dimension
		
		
		

		«FOR global : model.global»
		«global.generateGlobal»
		«ENDFOR»
		
		«FOR progressani : model.progressanimations»
		«progressani.generateProgress»
		«ENDFOR»
		
		«FOR template : model.templates»
		«template.generateTemplate»
		«ENDFOR»
		\begin{document}
		«FOR slide : model.slides»
		«slide.generateSlide»
		«ENDFOR»
		
		\end{document}
		'''
	}
	
	def generateProgress(ProgressAnimation progressani) {
		'''
		% progressani
		\def\progressbar@«progressani.name»{% 
		
		    \pgfmathparse{int(round(\insertframenumber-1))}
		    \progressbar@tmpcounta= \pgfmathresult
		    
		    \pgfmathparse{int(round(\inserttotalframenumber-1))}
		    \progressbar@tmpcountb=\pgfmathresult
		    
		    \progressbar@pbht= «val anime = progressani.progressbody.progressentities.get(1) as Animate»«FOR option : anime.value»«IF option.key == "height:"»«val hei = option as Height»«hei.value»«hei.unit»«ENDIF»«ENDFOR»
			\progressbar@pbwd=«FOR option : anime.value»«IF option.key == "width:"»«val wid = option as Width»«wid.value»«wid.unit»«ENDIF»«ENDFOR»\linewidth

		    \progressbar@tmpdim=\progressbar@pbwd
		    \multiply\progressbar@tmpdim by \progressbar@tmpcounta
		    \divide\progressbar@tmpdim by \progressbar@tmpcountb
		
		  \begin{tikzpicture}[overlay, remember picture,shift={($(current page.south west)+(1,«FOR option : anime.value»«IF option.key == "position:"»«option.value»«ENDIF»«ENDFOR»)\linewidth»)$)}, rounded corners=2pt,very thin]
		
		    \shade[top color=pbgray!20,bottom color=pbgray!20,middle color=pbgray!50]
		      (0pt, 0pt) rectangle ++ (\progressbar@pbwd, \progressbar@pbht);
		
		      \shade[draw=pbblue,top color=pbblue!50,bottom color=pbblue!50,middle color=pbblue] %
		        (0pt, 0pt) rectangle ++ (\progressbar@tmpdim, \progressbar@pbht);
		
		    \draw[color=normal text.fg!50]  
		      (0pt, 0pt) rectangle (\progressbar@pbwd, \progressbar@pbht) 
		        node[pos=0.5,color=black] {\textnormal{%
		             \insertframenumber/\inserttotalframenumber%
		        }%
		    };
		  \end{tikzpicture}%
		}
		\setbeamertemplate{«progressani.name»}
		{%
		
		  \begin{beamercolorbox}[wd=\paperwidth,ht=4ex,center,dp=1ex]{white}%
		    \progressbar@«progressani.name»%
		  \end{beamercolorbox}%
		}
		
		'''
	}
	def generateGlobal(Global global) {
		'''
		% #########################
		% #  GLOBAL STYLE         #
		% #########################
		«FOR style : global.globalbody.styles»
				«style.generateGlobalEntity»
		«ENDFOR»
		
		\BeforeBeginEnvironment{frame}{%
	    	«FOR style : global.globalbody.styles»
  				«style.generateGlobalStyle»
      		«ENDFOR»
		}
		% #########################
		
		'''
	}
	def generateTemplate(Template template) {
		'''
		% #########################
		% #  TEMPLATE «template.name.toUpperCase» #
		% #########################
		«FOR style : template.templatebody.styles»
				«style.generateTemplateEntity»
		«ENDFOR»
		
		    \makeatletter
		    \define@key{beamerframe}{«template.name»}[true]{%
	    	«FOR style : template.templatebody.styles»
  				«style.generateTemplateStyle»
      		«ENDFOR»
		}
		% #########################
		'''
	}
	def generateSlide(Slide slide) {		
		'''
		{
		«FOR style : slide.slidebody.styles»
				«style.generate»
		«ENDFOR»
		\begin{frame}«FOR entity : slide.slidebody.slideentities»«IF entity.key == "template:"»«entity.generate»«ENDIF»«ENDFOR»
		«FOR entity : slide.slidebody.slideentities»
			«IF entity.key != "template:"»
				«entity.generate»
			«ENDIF»
		«ENDFOR»
		Write your text hereeee :)
		\usebeamertemplate{«IF slide.slidebody.slideentities.size > 1»«val temp = slide.slidebody.slideentities.get(1) as Tmplt»«val proganim = temp.value.templatebody.templateentities.get(0) as Progressanim»«proganim.value.name»«ENDIF»}
		\end{frame}
		}
		'''
	}
	def dispatch generate(Title entity) {
		''' 
		\frametitle{«entity.value»}
		'''
	}
	def dispatch generate(Tmplt entity) {
		'''[«entity.value.name»]'''
	}
	def dispatch generate(Textcolor entity) {
		''' 
		\definecolor{TempText}{RGB}{«entity.value»}
		\setbeamercolor{normal text}{fg=TempText}
		'''
	}
	def dispatch generate(BackgroundColor entity) {
		''' 
		\definecolor{TempBG}{«entity.value»}
		\setbeamercolor{background canvas}{bg=TempBG}
		''' 
	}
	def dispatch generateGlobalEntity(BackgroundColor entity) {
		''' 
		\defbeamertemplate*{background canvas}{global}
		    {%		    
		      \definecolor{bgcolor}{rgb}{«entity.value»}\color{bgcolor}\vrule width\paperwidth height\paperheight
		}
		''' 
	}

	def dispatch generateGlobalEntity(Textcolor entity) {
		'''
		\definecolor{textcolor}{rgb}{«entity.value»}
		'''
	}
	def dispatch generateTemplateEntity(BackgroundColor entity) {
		'''
		\defbeamertemplate*{background canvas}{bg«entity.value»}
		    {%		    
		      \definecolor{bgcolor}{rgb}{«entity.value»}\color{bgcolor}\vrule width\paperwidth height\paperheight
		}
		     
		'''
	}
	def dispatch generateTemplateEntity(Textcolor entity) {
		'''
		\definecolor{textcolor}{rgb}{«entity.value»}
		'''
	}
	def dispatch generateGlobalStyle(BackgroundColor entity) {
		'''
		\setbeamertemplate{background canvas}[global]
		'''
	}
	def dispatch generateGlobalStyle(Textcolor entity) {
		'''
		\color{textcolor}
		'''	
	}
	def dispatch generateTemplateStyle(BackgroundColor entity) {
		'''
		\setbeamertemplate{background canvas}[bg«entity.value»]
		'''
	}
	def dispatch generateTemplateStyle(Textcolor entity) {
		'''
		\color{textcolor}
		'''	
	}

}